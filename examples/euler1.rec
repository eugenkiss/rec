// Church encoding for lists
void         := \x. x;
nil          := \onEmpty onPair. onEmpty(void);
cons(hd, tl) := \onEmpty onPair. onPair(hd, tl);
head(list)   := list(void, \hd tl. hd);
tail(list)   := list(void, \hd tl. tl);
null(list)   := list(\_. 1, \_ _. 0);

// Higher-order helper functions
iterateN(n, f, x)
  := if n = 0
        then nil()
        else cons(x, iterateN(n - 1, f, f(x)));

filter(f, list)
  := if null(list)
        then nil()
        else if f(head(list))
                then cons(head(list), filter(f, tail(list)))
                else filter(f, tail(list));

foldl(op, base, xs)
  := if null(xs)
        then base
        else foldl(op, op(base, head(xs)), tail(xs));

sum(xs) := foldl(\x y. x + y, 0, xs);

/*
http://projecteuler.net/problem=1: If we list all the natural numbers below 10
that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples
is 23.
*/
main :=
  sum(
    filter(\x. x % 3 = 0 || x % 5 = 0,
           iterateN(10, \x.x+1, 0)
          )
     )